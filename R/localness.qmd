---
title: "SERP: Localness and domains ranking"
author: "Liolia Bajemon"
format: html
editor: visual
---

### Description

The aim of this document is to answer the following questions:

-   Where does the data collected from the SERP come from?

-   Which countries produce the most data?

-   Is the data produced locally?

-   Are there domains or websites which predominate the web?

### Running Code

```{r read_combinations}
data_city_river = read.csv("1_input/river-city-combinations.csv") # read the data
```

```{r localness_calc}
library(urltools)

# retrieve data
cityname = "Lyon"
file = read.csv(paste0("collected_data/hl/clean_data/clean_", cityname, ".csv"))

## LOCALNESS
file = file %>% 
  # set localness to FALSE by default 
  mutate(localness = FALSE) %>% 
  # extract the suffix from the domain with the urltools package
  mutate(suffix = (suffix_extract(domain(file$domain)))$suffix)

# now check if the suffix corresponds to the suffix of the country
# retrieve the suffix of the country
city_suffix = data_city_river[data_city_river$city == cityname, 5]
# compare
locals = file %>% 
  mutate(localness = case_when(suffix == city_suffix ~ "TRUE", suffix == "org" ~ "organization", .default = "FALSE"))


### PROVISOIRE LYON : 
file = file %>% 
  mutate(localness = case_when(suffix == "fr" | suffix == "gouv.fr" | suffix == "tm.fr" ~ "contenu local", suffix == "org" ~ "association", .default = "autre, contenu non local")) 

### PLOT
# count
tib_localness = file %>% 
  group_by(localness) %>% 
  mutate(n = n()) %>% 
  distinct(localness, n) %>% 
  mutate(perc = round(n/nrow(file)*100,1))

# plot
png(file = glue::glue("analysis/occurence/hl/plots/{cityname}_localness.png")) # indicate the path to save the plot 

plot = tib_localness %>% 
  mutate(localness = fct_reorder(localness, perc))  %>%  # rearrange in decreasing order
  ggplot(mapping = aes(x = localness, 
                       y = perc,
                       fill = localness)) +
    geom_col() +
    scale_fill_manual(values = c("lightsalmon", "yellowgreen", "lightblue")) +
    labs(title = "Les résultats Google sont-ils produits localement ?", 
         subtitle = "L'exemple de Lyon",
         fill = "",
         x = "",
         y = "%") +
    coord_flip() + # flip x and y coordinates 
    theme_classic() +
  theme(legend.position = "none")
  
  plot # display the plot
  dev.off() # Close the plot and save it 
```

```{r kinshasa}
# retrieve data
cityname = "Kinshasa"
file = read.csv(paste0("collected_data/hl/clean_data/clean_", cityname, ".csv"))

## LOCALNESS
file = file %>% 
  # set localness to FALSE by default 
  mutate(localness = FALSE) %>% 
  # extract the suffix from the domain with the urltools package
  mutate(suffix = (suffix_extract(domain(file$domain)))$suffix)

# now check if the suffix corresponds to the suffix of the country
# retrieve the suffix of the country
city_suffix = data_city_river[data_city_river$city == cityname, 5]

### PROVISOIRE LYON : 
file = file %>% 
  mutate(localness = case_when(suffix == "fr" | suffix == "be" | suffix == "co.uk" ~ "contenu produit en Europe (.fr, .be, .co.uk)", suffix == "org" ~ "association", suffix == "com" ~ "contenu produit aux Etats-Unis (.com)", suffix == "cd" ~ "contenu produit localement (.cd)", .default = "autre (.net, .info, etc.)")) 

### PLOT
# count
tib_localness = file %>% 
  group_by(localness) %>% 
  mutate(n = n()) %>% 
  distinct(localness, n) %>% 
  mutate(perc = round(n/nrow(file)*100,1))

# plot
png(file = glue::glue("3_frequency/hl/plots/{cityname}_localness.png")) # indicate the path to save the plot 

plot = tib_localness %>% 
  mutate(localness = fct_reorder(localness, n))  %>%  # rearrange in decreasing order
  ggplot(mapping = aes(x = localness, 
                       y = perc,
                       fill = localness)) +
    geom_col() +
    scale_fill_manual(values = c("gold","plum2","yellowgreen","lightsalmon","lightblue")) +
    labs(title = "Les résultats Google sont-ils produits localement ?", 
         subtitle = "L'exemple de Kinshasa",
         fill = "",
         x = "",
         y = "%") +
    coord_flip() + # flip x and y coordinates 
    theme_classic() +
  theme(legend.position = "none")
  
  plot # display the plot
  dev.off() # Close the plot and save it 
```

#### Domains ranking

```{r domains_ranking}
 
### GET DF WITH DOMAINS
df_domain = df %>% 
  mutate(domaine = (suffix_extract(domain(df$domain)))$domain) %>% 
  group_by(domaine) %>% 
  mutate(n = n()) %>% 
  distinct(domaine, n) %>% 
  arrange(n)

### PLOT 
plot = df_domain %>% 
  subset(n > 4) %>% 
  mutate(domaine = fct_reorder(domaine, n)) %>% 
  ggplot(mapping = aes(x = domaine, 
                       y = n)) +
    geom_col() +
    labs(title = "Les domaines les plus courants", 
         subtitle = "n = 15 villes",
         fill = "",
         x = "nom du domaine",
         y = "nombre de snippets") +
    coord_flip() + # flip x and y coordinates 
    theme_classic() +
  theme(legend.position = "none")
  
  plot # display the plot
```
