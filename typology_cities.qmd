---
title: "Typology of cities"
format: html
editor: visual
---

The aim of this document is to create a typology of cities, based on the classification of the corpus (see "clustering.qmd"). For example, two cities for which the main classes are "tourism" and "architecture" will be of the same type, hence in the same cluster.

```{r packages}
library(tidyverse)
library(quanteda)
library(data.table)
library(explor)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(rnaturalearth)
library(ggplot2)
library(ggrepel)
library(sf)
library(RColorBrewer)
library(rainette)
library(vegan)
```

### Read and process data

```{r}
data_city_river = read.csv("input_data/data_city_river.csv") %>% 
  mutate(nom = paste0(urban_aggl, "-", riviere)) %>% 
  select(c("fid", "nom"))
df = read.csv("collected_data/corpus_distinct.csv") %>% 
  dplyr::rename(tokenized = tokenized_noloc) %>% # rename column
  subset(!is.na(tokenized)) 
corpus = quanteda::corpus(df, text_field = "tokenized", docid_field = "id")
corpus = split_segments(corpus, segment_size = 40)
dhc = readRDS("analysis/clusters/dhc_all.rds")
# add clusters
corpus$topic = rainette::cutree(dhc, 14)  
# and turn it into a df
corpus_df = convert(corpus, to = "data.frame")
topic_names = read.csv("input_data/topic_names.csv", sep = "\t")
calc = corpus_df %>% 
  group_by(fid, topic) %>% 
  # get number of segment / cluster
  summarise(n = n()) %>% 
  group_by(fid) %>% 
  # get total number of segments / city 
  mutate(somme = sum(n)) %>% 
  # get percentage of cluster / city
  mutate(perc = n/somme*100) %>% 
  # get cluster name
  mutate(topic = paste0("topic_", topic))
write.csv(calc, "analysis/typology_cities/results_long.csv")

# reshape the table
df = dcast(calc, fid ~ topic, value.var = "perc") %>% 
# replace NA values with 0
  replace_na(list(topic_1 = 0, topic_2 = 0, topic_3 = 0, topic_4 = 0, topic_5 = 0, topic_6 = 0, topic_7 = 0, topic_8 = 0, topic_9 = 0, topic_10 = 0, topic_11 = 0, topic_12 = 0, topic_13 = 0, topic_14 = 0, topic_NA = 0)) %>% 
  left_join(data_city_river, by = "fid")
```

### ACP

The ggplot script was partly written using chatgpt, with the prompt "Bonjour, je veux traduire cette fonction en figure ggplot : "autoplot(pca_res, scale = 0, loadings = TRUE, loadings.colour = "#1b9e77", loadings.label = TRUE, loadings.label.colour = "#1b9e77", theme = "minimal")" Voici le début de ce que j'ai écrit : "pca_res = prcomp(df_names\[,2:16\], scale. = TRUE)

pca_res %\>% ggplot(aes(x = PC1, y = PC2)) + geom_point(size = 5, color = "#1b9e77") + geom_segment(aes(data = pca_res\$rotation))""

```{r ggplot_acp}
# rename with explicit labels
df_names = df %>% 
  rename(santé = topic_1,
         gouvernement = topic_2,
         université_histoire = topic_3,
         faits_divers = topic_4,
         tourisme = topic_5,
         patrimoine = topic_6,
         infrastructures = topic_7,
         images = topic_8,
         aménagement = topic_9,
         pollution = topic_10,
         para_physicochimiques = topic_11,
         alerte = topic_12,
         inondations = topic_13,
         hydrographie = topic_14,
         classe_NA = topic_NA)
rownames(df_names) = df_names[,17]

# calculation
pca_res = prcomp(df_names[,2:16], scale. = TRUE)
scores = as.data.frame(pca_res$x) 
loadings = as.data.frame(pca_res$rotation) %>% 
  mutate(label = rownames(pca_res$rotation))

# plot
ggplot(scores, aes(x = PC1, y = PC2)) +
  geom_point(size = 5, color = "#a6d854") + # individuals
  geom_segment(data = loadings,
               aes(x = 0, y = 0, xend = PC1 * 5, yend = PC2 * 5),
               arrow = arrow(length = unit(0.2, "cm")),
               color = "black") + # eigenvalues 
  geom_text_repel(data = loadings, aes(x = PC1 * 5, y = PC2 * 5, label = label), color = "black", size = 5) +
  theme_bw() +
  labs(x = "PC1 - 19,09 %",
       y = "PC2 - 11,11 %")

ggsave("analysis/typology_cities/res_acp.png", width = 40, height = 20, units = "cm")
```

```{r other_methods_acp}
autoplot(pca_res, scale = 0, loadings = TRUE, loadings.colour = "#1b9e77", loadings.label = TRUE, loadings.label.colour = "#1b9e77", theme = "minimal")

# other methods 
resultat = PCA(df_names[,2:16])
# plot variables (clusters)
plot.PCA(resultat, choix = "var") 
# plot individuals (cities)
plot.PCA(resultat, choix = "ind")

explor(resultat)
```

### Clustering

```{r}
# get clusters
# matrix of distances
df_calc = df

# method of Hellinger
esp_hel = decostand(df_calc[,2:16], method = "hellinger")
matrice = dist(esp_hel)

# clustering
clust = hclust(matrice, method = "ward.D2")
# get cluster for each city
df_calc$type_city = cutree(clust, 4)

# map the results
coords = read.csv("input_data/data_city_river.csv") %>% 
  select(c("fid", "urban_aggl", "latitude", "longitude")) %>% 
  mutate(latitude = as.numeric(str_replace_all(latitude, ",", "."))) %>% 
  mutate(longitude = as.numeric(str_replace_all(longitude, ",", "."))) %>% 
  left_join(df_calc[,c(1,18)], by = "fid")
coords_sf = st_as_sf(coords, coords = c("longitude", "latitude"), crs = 4326)
world_map = ne_countries(scale = "medium", returnclass = "sf")

coords_sf$type_city = as.factor(coords_sf$type_city)

ggplot(world_map) +
  # world map 
  geom_sf(fill = "#f0f0f1", color = "white", size = 0.2) +
  # city points
  geom_sf(data = coords_sf, aes(color = type_city), alpha = 0.7, show.legend = TRUE, size = 4) +
  scale_color_manual(values = c("#8dd3c7", "#fdb462", "#a6d854", "#fa9fb5")) +
  # equal earth projection
  coord_sf(crs = "+proj=eqearth") +
  # theme
  theme_void() +
  theme(legend.position = "bottom",
        plot.background = element_rect(fill = "white", color = "white")) +
  labs(color = "Groupe")

ggsave("analysis/typology_cities/map_clusters.svg", width = 4000, height = 2500, units = "px")
```

```{r}
# description of the clusters with boxplots
clusters = df_calc %>% 
  select(c("fid", "type_city"))
df = calc %>% 
  select(c("fid","topic", "perc")) %>% 
  left_join(clusters, by = "fid") %>% 
  left_join(topic_names, by = "topic") %>%
  mutate(topic_nb = as.numeric(str_remove_all(topic, "topic_")))

df %>% 
  filter(type_city == 1) %>% 
  ggplot(aes(x = factor(topic_nb, levels = sort(unique(topic_nb))), y = perc)) +
  geom_boxplot(fill = "#8dd3c7") +
  scale_y_continuous(breaks = seq(0, 80, by = 20)) +
  ylim(c(0, 80)) +
  theme_bw() +
  labs(x = "Thématique n°",
       y = "%")
ggsave(filename = "analysis/typology_cities/description_cl1.png", width = 20, height = 10, units = "cm")

df %>% 
  filter(type_city == 2) %>% 
  ggplot(aes(x = factor(topic_nb, levels = sort(unique(topic_nb))), y = perc)) + 
  geom_boxplot(fill = "#fdb462") +
  scale_y_continuous(breaks = seq(0, 80, by = 20)) +
  ylim(c(0, 80)) +
  theme_bw() +
  labs(x = "Thématique n°",
       y = "%")
ggsave(filename = "analysis/typology_cities/description_cl2.png", width = 20, height = 10, units = "cm")

df %>% 
  filter(type_city == 3) %>% 
  ggplot(aes(x = factor(topic_nb, levels = sort(unique(topic_nb))), y = perc)) + 
  geom_boxplot(fill = "#a6d854") +
  scale_y_continuous(breaks = seq(0, 80, by = 20)) +
  ylim(c(0, 80)) +
  theme_bw() +
  labs(x = "Thématique n°",
       y = "%")
ggsave(filename = "analysis/typology_cities/description_cl3.png", width = 20, height = 10, units = "cm")

df %>% 
  filter(type_city == 4) %>% 
  ggplot(aes(x = factor(topic_nb, levels = sort(unique(topic_nb))), y = perc)) + 
  geom_boxplot(fill = "#fa9fb5") +
  scale_y_continuous(breaks = seq(0, 80, by = 20)) +
  ylim(c(0, 80)) +
  theme_bw() +
  labs(x = "Thématique n°",
       y = "%")
ggsave(filename = "analysis/typology_cities/description_cl4.png", width = 20, height = 10, units = "cm")
```

```{r}
# box plots with each topic side by side 
df %>% 
  ggplot(aes(x = type_city, y = perc, fill = as.factor(type_city))) + 
  geom_boxplot() +
  scale_fill_manual(breaks = c(1, 2, 3, 4),
                    values = c("#8dd3c7", "#fdb462", "#a6d854", "#fa9fb5")) +
  facet_wrap(~name) +
  labs(x = "Groupe de villes",
       y = "%") +
  theme_bw() +
  theme(legend.position = "none") 
ggsave(filename = "analysis/typology_cities/facet_wrap.png", width = 30, height = 25, units = "cm")
```
