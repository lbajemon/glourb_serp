---
title: "Search Engine Pages Results: Plot clustering results on maps"
format: html
editor: visual
author: Liolia Bajemon
---

Set-up

```{r}
library(leaflet)
library(leaflet.extras)
library(leaflet.providers)
library(leaflegend)
library(ggplot2)
library(scatterpie)
library(tmaptools)
library(tidyverse)
library(htmltools)
```

### Read data

```{r read_data}
data = read.csv("analysis/clustering/summary_8_en_noloc.csv") %>% 
  mutate(longitude = as.numeric(str_replace_all(longitude, ",", "."))) %>% 
  mutate(latitude = as.numeric(str_replace_all(latitude, ",", "."))) %>% 
  select(-biome, -clco, -climate)

# find max cluster  
col_classe = c("cl1", "cl2", "cl3", "cl4", "cl5", "cl6", "cl7", "cl8", "clNA")
data$classe <- apply(data[,col_classe], 1, function(row){
  col_classe[which.max(row)]
})
```

##### **b. Calculation of the specificity scores based on the clustering**

```{r specificity_score_clustering}
# calculate the specifity scores

# read data
df = read.csv("analysis/clustering/classified_snippets_8_en_noloc.csv") %>% 
  mutate(cl = paste0("cluster_", cluster)) 

spec_score = mixr::tidy_specificities(df,
                                fid,
                                cl)

# get the maximum specifity score for each city and its associated class
serp_max = spec_score %>% 
  group_by(fid) %>% 
  filter(spec == max(spec, na.rm = TRUE)) %>% 
  rename(spec_max = spec, n_max = n, cl_max = cl)

serp_min = spec_score %>% 
  group_by(fid) %>% 
  filter(spec == min(spec, na.rm = TRUE)) %>% 
  mutate(n = replace_na(n, 0)) %>% 
  rename(spec_min = spec, n_min = n, cl_min = cl)

# join with data_city_river dataset
data_city_river = read.csv("input_data/data_city_river.csv")
data_city_river = data_city_river %>% 
  left_join(serp_max, by = "fid") %>% 
  left_join(serp_min, by = "fid") %>% 
  mutate(longitude = str_replace_all(longitude, ",", ".")) %>% 
  mutate(latitude = str_replace_all(latitude, ",", ".")) %>% 
  mutate(longitude = as.numeric(longitude, digits = 5)) %>% 
  mutate(latitude = as.numeric(latitude, digits = 5)) 
  
# for cities with specificity scores < 2, the results are not adequate (Pincemin, 2023)
data_city_river = data_city_river %>% 
  mutate(cl_max = case_when(
    spec_max < 2 ~ "cluster_NA",
    spec_max >= 2 ~ cl_max)
    ) %>% 
  mutate(classname = case_when(
    cl_max == "cluster_1" ~ "Hydrographie",
    cl_max == "cluster_2" ~ "Localisation",
    cl_max == "cluster_3" ~ "Réseaux et infrastructures",
    cl_max == "cluster_4" ~ "Académique",
    cl_max == "cluster_5" ~ "Connaissances et gestion",
    cl_max == "cluster_6" ~ "Aménagement",
    cl_max == "cluster_7" ~ "Tourisme et loisirs",
    cl_max == "cluster_8" ~ "Internet",
    cl_max == "cluster_NA" ~ "Résultats non significatifs (classe NA)"))
```

Finally, we can plot the results on a map:

```{r map_clusters}
# and plot the results on a map 

# define palette
mypalette = get_brewer_pal("Set3", 9) 

f_pal <- colorFactor(palette = mypalette, 
                     levels = c("Hydrographie",
                               "Localisation",    
                               "Réseaux et infrastructures", 
                               "Académique", 
                               "Connaissances et gestion", 
                               "Aménagement", 
                               "Tourisme et loisirs", 
                               "Internet", 
                               "Résultats non significatifs (classe NA)"
                              )) 
# define title
tag.map.title <- tags$style(HTML("
  .leaflet-control.map-title { 
    transform: translate(-50%,20%);
    position: topright;
    left: 50%;
    text-align: center;
    padding-left: 10px; 
    padding-right: 10px; 
    background: rgba(50, 111, 168,0.5);
    #font-weight: bold;
    font-size: 18px;
    color: white;
  }
"))
title <- tags$div(
  tag.map.title, HTML("<td align=justify><b>Les discours sur les rivières dans les pages de résultats de moteur de recherche</b><em><br> (requête en anglais de type 'ville AND rivière')</em></td>"))

leaf <- leaflet(data = data_city_river, options = leafletOptions(zoomControl = TRUE, minZoom = 1, maxZoom = 5)) %>% 
  addProviderTiles("CartoDB.VoyagerNoLabels") %>% 
  addCircleMarkers(~longitude, 
                   ~latitude,
                   label = data_city_river$urban_aggl,
                   color = ~f_pal(data_city_river$classname),
                   opacity = 1, 
                   radius = 0.5*data_city_river$spec_max) %>% 
  # add title
  addControl(title, position = "topright") %>% 
  # add legend
  addLegend(title = "Classe", pal = f_pal, values = ~data_city_river$classname, opacity = 1, position = "bottomleft") %>% 
  addScaleBar(position = "bottomright", 
              options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>% 
  addLegendSize(title = "Score de spécificité", values = ~data_city_river$spec*0.5, color = "black", shape = "circle", baseSize = 4)
```

Plot le max :

```{r plot_max}
data = read.csv("analysis/clustering/summary_8_en_noloc.csv") %>% 
  mutate(longitude = as.numeric(str_replace_all(longitude, ",", "."))) %>% 
  mutate(latitude = as.numeric(str_replace_all(latitude, ",", "."))) %>% 
  select(-biome, -clco, -climate)

# find max cluster  
col_classe = c("cl1", "cl2", "cl3", "cl4", "cl5", "cl6", "cl7", "cl8", "clNA")
data$classe <- apply(data[,col_classe], 1, function(row){
  col_classe[which.max(row)]
})
data = data %>% 
 mutate(classname = case_when(
    classe == "cl1" ~ "Hydrographie",
    classe == "cl2" ~ "Localisation",
    classe == "cl3" ~ "Réseaux et infrastructures",
    classe == "cl4" ~ "Académique",
    classe == "cl5" ~ "Connaissances et gestion",
    classe == "cl6" ~ "Aménagement",
    classe == "cl7" ~ "Tourisme et loisirs",
    classe == "cl8" ~ "Internet",
    classe == "clNA" ~ "Résultats non significatifs"))

mypalette = get_brewer_pal("Set3", 9) 
mypalette[2] = "#e6ab02"
f_pal <- colorFactor(palette = mypalette, 
                     levels = c("Hydrographie",
                               "Localisation",    
                               "Réseaux et infrastructures", 
                               "Académique", 
                               "Connaissances et gestion", 
                               "Aménagement", 
                               "Tourisme et loisirs", 
                               "Internet", 
                               "Résultats non significatifs"
                              )) 

leaf <- leaflet(data = data, options = leafletOptions(zoomControl = TRUE, minZoom = 1, maxZoom = 5)) %>% 
  addProviderTiles("CartoDB.VoyagerNoLabels") %>% 
  addCircleMarkers(~longitude, 
                   ~latitude,
                   label = data$urban_aggl,
                   color = ~f_pal(data$classname),
                   opacity = 1, 
                   radius = 2) %>% 
  # add title
  addControl(title, position = "topright") %>% 
  # add legend
  addLegend(title = "Classe", pal = f_pal, values = ~data$classname, opacity = 1, position = "bottomleft") %>% 
  addScaleBar(position = "bottomright", 
              options = scaleBarOptions(metric = TRUE, imperial = FALSE))
```

##### **c. A city and its clusters**

Instead of calculating the specificity score, we can also look at a given city and see the represented clusters.

```{r clusters_by_city}
serp_absolu = spec_score
# replace NA values by 0, i.e. no snippet falls in this cluster
serp_absolu[is.na(serp_absolu)] <- 0

# put the colors of each class in the df
tib_colors = tib_clusters[-4,-1] # one class corresponds to one colour
serp_test = left_join(serp_absolu, tib_colors, by = "class_name", relationship = "many-to-many") 
colnames(serp_absolu) = c("cityname", "class_name", "spec", "n", "couleur")
  
ma_ville = "Rosario"
mon_plot = subset(serp_absolu, serp_absolu$cityname == ma_ville) %>% # our data
    mutate(class_name = fct_reorder(class_name, n)) %>% # rearrange in decreasing order
    ggplot(aes(x = class_name, y = n, fill = class_name)) + 
    geom_col(show.legend = FALSE) +
    scale_fill_manual(values = c("#6a3d9a",
                                 "#17BECFFF",
                                 "#ff7f00",
                                 "#a6cee3", 
                                 "#1f78b4", 
                                 "#b2df8a", 
                                 "#fb9a99",
                                 "#ffd92f", 
                                 "#33a02c",
                                 "#e7298a",
                                 "#b15928", 
                                 "#e31a1c",
                                 "white",
                                 "#BCBD22FF"
                                 ), breaks = c("informations descriptives, généralités", 
                               "ouvrages hydrauliques",    
                               "scientifique/universitaire", 
                               "hydrologie", 
                               "ressource en eau", 
                               "écoulement", 
                               "tourisme (activités)", 
                               "localisation géographique", 
                               "enjeu portuaire/côtier", 
                               "internet", 
                               "tourisme (voyage)", 
                               "tourisme (culturel)",
                               "résultats non significatifs", "réseaux sociaux"))+
    coord_flip() + # flip x and y coordinates 
    labs(x = "",
         y = "nombre de snippets") +
    ggtitle(paste("Discours sur l'eau à", ma_ville)) +
    theme_bw()
```

##### d. AFC

```{r}
library(FactoMineR)

# keep only quantitative columns
data_afc = data[,c(2,8:16)] 
# put urban_aggl column in row names 
data_afc2 = data_afc[,-1]
rownames(data_afc2) = data_afc[,1]
data_afc = data_afc2

resultat = PCA(data_afc)
explor::explor(resultat)
```
